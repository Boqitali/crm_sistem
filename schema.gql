# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Admin {
  email: String!
  firstName: String!
  id: ID!
  is_active: Boolean!
  is_creator: Boolean!
  lastName: String!
  password: String!
  phone: String!
  refresh_token: String!
}

type Attendance {
  date: DateTime!
  id: ID!
  status: String!
}

type Course {
  description: String!
  duration: Float!
  id: ID!
  lesson_duration: Float!
  lessons_in_a_week: Float!
  price: Float!
  title: String!
}

input CreateAdminDto {
  confirm_password: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phone: String!
}

input CreateAttendanceDto {
  date: DateTime!
  status: String!
}

input CreateCourseDto {
  description: String!
  duration: Float!
  lesson_duration: Float!
  lessons_in_a_week: Float!
  price: Float!
  title: String!
}

input CreateGroupDto {
  end_date: DateTime!
  name: String!
  start_date: DateTime!
  status: String!
}

input CreateScheduleDto {
  day_of_week: String!
  end_time: DateTime!
  start_time: DateTime!
}

input CreateStudentDto {
  avatar_url: String!
  confirm_password: String!
  date_of_borth: DateTime!
  email: String!
  firstName: String!
  gender: String!
  lastName: String!
  password: String!
  phone: String!
}

input CreateStudentGroupDto {
  is_active: Boolean!
  period: String!
}

input CreateTeacherDto {
  avatar_url: String!
  bith_data: DateTime!
  confirm_password: String!
  email: String!
  firstName: String!
  gender: String!
  lastName: String!
  password: String!
  phone: String!
}

input CreateTeacherGroupDto {
  groupId: Float!
  teacherId: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Group {
  end_date: DateTime!
  id: ID!
  name: String!
  start_date: DateTime!
  status: String!
}

type Mutation {
  createAdmin(createAdmin: CreateAdminDto!): Admin!
  createAttendance(createAttendance: CreateAttendanceDto!): Attendance!
  createCourse(createCourse: CreateCourseDto!): Course!
  createGroup(createGroup: CreateGroupDto!): Group!
  createSchedule(createSchedule: CreateScheduleDto!): Schedule!
  createStudent(createStudent: CreateStudentDto!): Student!
  createStudentGroup(createStudentGroup: CreateStudentGroupDto!): StudentGroup!
  createTeacher(createTeacher: CreateTeacherDto!): Teacher!
  createTeacherGroup(createTeacherGroup: CreateTeacherGroupDto!): TeacherGroup!
  removeAdmin(id: ID!): Float!
  removeAttendance(id: ID!): Float!
  removeCourse(id: ID!): Float!
  removeGroup(id: ID!): Float!
  removeSchedule(id: ID!): Float!
  removeStudent(id: ID!): Float!
  removeStudentGroup(id: ID!): Float!
  removeTeacher(id: ID!): Teacher!
  removeTeacherGroup(id: ID!): Float!
  updateAdmin(id: ID!, updateAdmin: UpdateAdminDto!): Admin!
  updateAttendance(id: ID!, updateAttendance: UpdateAttendanceDto!): Attendance!
  updateCourse(id: ID!, updateCourse: UpdateCourseDto!): Course!
  updateGroup(id: ID!, updateGroup: UpdateGroupDto!): Group!
  updateSchedule(id: ID!, updateSchedule: UpdateScheduleDto!): Schedule!
  updateStudent(id: ID!, updateStudent: UpdateStudentDto!): Student!
  updateStudentGroup(id: ID!, updateStudentGroup: UpdateStudentGroupDto!): StudentGroup!
  updateTeacher(id: ID!, updateTeacher: UpdateTeacherDto!): Teacher!
  updateTeacherGroup(id: ID!, updateTeacherGroup: UpdateTeacherGroupDto!): TeacherGroup!
}

type Query {
  findAllAdmin: [Admin!]!
  findAllAttendance: [Attendance!]!
  findAllCourses: [Course!]!
  findAllGroup: [Group!]!
  findAllSchedule: [Schedule!]!
  findAllStudentGroup: [StudentGroup!]!
  findAllStudents: [Student!]!
  findAllTeacher: [Teacher!]!
  findAllTeacherGroup: [TeacherGroup!]!
  findOneAdmin(id: ID!): Admin!
  findOneAttendance(id: ID!): Attendance!
  findOneCourse(id: ID!): Course!
  findOneGroup(id: ID!): Group!
  findOneSchedule(id: ID!): Schedule!
  findOneStudent(id: ID!): Student!
  findOneStudentGroup(id: ID!): StudentGroup!
  findOneTeacher(id: ID!): Teacher!
  findOneTeacherGroup(id: ID!): TeacherGroup!
}

type Schedule {
  day_of_week: String!
  end_time: DateTime!
  id: ID!
  start_time: DateTime!
}

type Student {
  avatar_url: String!
  date_of_borth: DateTime!
  email: String!
  firstName: String!
  gender: String!
  id: ID!
  is_active: Boolean!
  lastName: String!
  password: String!
  phone: String!
  refresh_token: String!
}

type StudentGroup {
  groupId: String!
  id: ID!
  is_active: Boolean!
  period: String!
  studentId: String!
}

type Teacher {
  avatar_url: String!
  bith_data: DateTime!
  email: String!
  firstName: String!
  gender: String!
  id: ID!
  is_active: Boolean!
  lastName: String!
  password: String!
  phone: String!
  refresh_token: String!
}

type TeacherGroup {
  groupId: Float!
  id: ID!
  teacherId: Float!
}

input UpdateAdminDto {
  confirm_password: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phone: String!
}

input UpdateAttendanceDto {
  date: DateTime!
  status: String!
}

input UpdateCourseDto {
  description: String!
  duration: Float!
  lesson_duration: Float!
  lessons_in_a_week: Float!
  price: Float!
  title: String!
}

input UpdateGroupDto {
  end_date: DateTime!
  name: String!
  start_date: DateTime!
  status: String!
}

input UpdateScheduleDto {
  day_of_week: String!
  end_time: DateTime!
  start_time: DateTime!
}

input UpdateStudentDto {
  avatar_url: String!
  confirm_password: String!
  date_of_borth: DateTime!
  email: String!
  firstName: String!
  gender: String!
  lastName: String!
  password: String!
  phone: String!
}

input UpdateStudentGroupDto {
  is_active: Boolean!
  period: String!
}

input UpdateTeacherDto {
  avatar_url: String!
  bith_data: DateTime!
  confirm_password: String!
  email: String!
  firstName: String!
  gender: String!
  lastName: String!
  password: String!
  phone: String!
}

input UpdateTeacherGroupDto {
  groupId: Float!
  teacherId: Float!
}